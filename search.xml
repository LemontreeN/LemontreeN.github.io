<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis源码分析</title>
      <link href="/2024/09/13/Redis%E6%BA%90%E7%A0%81/Redis/"/>
      <url>/2024/09/13/Redis%E6%BA%90%E7%A0%81/Redis/</url>
      
        <content type="html"><![CDATA[<h4 id="SDS-分析"><a href="#SDS-分析" class="headerlink" title="SDS 分析"></a>SDS 分析</h4><p>为什么Redis没有使用C语言中的字符串？</p><ul><li>获取字符串长度需要运算</li><li>非二进制安全：比如字符串中间出现了’\0’，读取就会提前结束</li><li>不可修改：字面值存储在字符串常量池中，不可修改</li></ul><p>C语言的字符串底层都是字符数组char[]，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* s = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">// 底层是&#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;,&#x27;\0&#x27;&#125;,其中&#x27;\0&#x27;是结束标志</span></span><br></pre></td></tr></table></figure><p>因此，Redis实现了SDS（Simple Dynamic String）- 简单动态字符串。</p><h4 id="SDS代码全文详解"><a href="#SDS代码全文详解" class="headerlink" title="SDS代码全文详解"></a>SDS代码全文详解</h4><h5 id="sds结构体："><a href="#sds结构体：" class="headerlink" title="sds结构体："></a>sds结构体：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span> &#123;</span><span class="comment">// sdshdrx:x字节头部的SDS结构体，各种结构体支持的长度和内存分配不同,以8为示例</span></span><br><span class="line">    <span class="type">uint8_t</span> len; <span class="comment">// buf[]数组已经保存的字符串字节数，不包含结束标志符（uint64_t: unsigned int 68bit;）</span></span><br><span class="line">    <span class="comment">// 所以sdshdr64支持的字符串最大长度为2^8-1-1个字节（因为buf中也有\0要多减1）</span></span><br><span class="line">    <span class="type">uint8_t</span> alloc; <span class="comment">// buf[]申请的总字节数，不包含结束标志符</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">// 不同SDS的头类型，用来控制SDS的头大小</span></span><br><span class="line">    <span class="type">char</span> buf[];<span class="comment">// 字符数组，保存了SDS的实际数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// flags实际取值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_5  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_8  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_16 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_32 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_64 4</span></span><br></pre></td></tr></table></figure><p>以实际字符串”name”为例，它用sds8即可存储，结构如下：</p><p><img src="C:\Users\LemontreeN\AppData\Roaming\Typora\typora-user-images\image-20240913181310379.png" alt="image-20240913181310379"></p><h5 id="sds扩容"><a href="#sds扩容" class="headerlink" title="sds扩容"></a>sds扩容</h5><p>假设有一个初始sds，内容为”hi”，如下图</p><p><img src="/../../images/Redis/image-20240914163210640.png" alt="image-20240914163210640"></p><p><img src="C:\Users\LemontreeN\AppData\Roaming\Typora\typora-user-images\image-20240913181535065.png" alt="image-20240913181535065"></p><h5 id="sds-h"><a href="#sds-h" class="headerlink" title="sds.h"></a>sds.h</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SDS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SDS_H <span class="comment">//防止头文件被重复包含</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_MAX_PREALLOC (1024*1024) <span class="comment">// SDS最大预分配内存为1M</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *SDS_NOINIT; <span class="comment">// 外部常量 SDS_NOINIT，用于表示SDS对象未初始化。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span><span class="comment">// 是Unix/Linux系统的基本系统数据类型的头文件,含有size_t，time_t，pid_t等类型。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span><span class="comment">// C标准库，让函数能够接收可变参数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span><span class="comment">// 定义了一些拓展的证书类型和宏</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *sds;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sdshdrx:x字节头部的SDS结构体，各种结构体支持的长度和内存分配不同</span></span><br><span class="line"><span class="comment">// 此处仅保留了sdshdr64</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> len; <span class="comment">/*  */</span></span><br><span class="line">    <span class="type">uint64_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/*   3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_5  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_8  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_16 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_32 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_64 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_MASK 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_BITS 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_HDR(T,s) ((struct sdshdr##T *)((s)-(sizeof(struct sdshdr##T))))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_5_LEN(f) ((f)&gt;&gt;SDS_TYPE_BITS)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">sdslen</span><span class="params">(<span class="type">const</span> sds s)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">switch</span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="keyword">return</span> SDS_TYPE_5_LEN(flags);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">8</span>,s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">16</span>,s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">32</span>,s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">64</span>,s)-&gt;len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">sdsavail</span><span class="params">(<span class="type">const</span> sds s)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">switch</span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">8</span>,s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">16</span>,s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">32</span>,s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">64</span>,s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">sdssetlen</span><span class="params">(sds s, <span class="type">size_t</span> newlen)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">switch</span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> *fp = ((<span class="type">unsigned</span> <span class="type">char</span>*)s)<span class="number">-1</span>;</span><br><span class="line">                *fp = SDS_TYPE_5 | (newlen &lt;&lt; SDS_TYPE_BITS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            SDS_HDR(<span class="number">8</span>,s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            SDS_HDR(<span class="number">16</span>,s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            SDS_HDR(<span class="number">32</span>,s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            SDS_HDR(<span class="number">64</span>,s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">sdsinclen</span><span class="params">(sds s, <span class="type">size_t</span> inc)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">switch</span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> *fp = ((<span class="type">unsigned</span> <span class="type">char</span>*)s)<span class="number">-1</span>;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> newlen = SDS_TYPE_5_LEN(flags)+inc;</span><br><span class="line">                *fp = SDS_TYPE_5 | (newlen &lt;&lt; SDS_TYPE_BITS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            SDS_HDR(<span class="number">8</span>,s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            SDS_HDR(<span class="number">16</span>,s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            SDS_HDR(<span class="number">32</span>,s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            SDS_HDR(<span class="number">64</span>,s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* sdsalloc() = sdsavail() + sdslen() */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">sdsalloc</span><span class="params">(<span class="type">const</span> sds s)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">switch</span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="keyword">return</span> SDS_TYPE_5_LEN(flags);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">8</span>,s)-&gt;alloc;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">16</span>,s)-&gt;alloc;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">32</span>,s)-&gt;alloc;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">64</span>,s)-&gt;alloc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">sdssetalloc</span><span class="params">(sds s, <span class="type">size_t</span> newlen)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">switch</span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="comment">/* Nothing to do, this type has no total allocation info. */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            SDS_HDR(<span class="number">8</span>,s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            SDS_HDR(<span class="number">16</span>,s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            SDS_HDR(<span class="number">32</span>,s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            SDS_HDR(<span class="number">64</span>,s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sds <span class="title function_">sdsnewlen</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *init, <span class="type">size_t</span> initlen)</span>;</span><br><span class="line">sds <span class="title function_">sdstrynewlen</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *init, <span class="type">size_t</span> initlen)</span>;</span><br><span class="line">sds <span class="title function_">sdsnew</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *init)</span>;</span><br><span class="line">sds <span class="title function_">sdsempty</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">sds <span class="title function_">sdsdup</span><span class="params">(<span class="type">const</span> sds s)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdsfree</span><span class="params">(sds s)</span>;</span><br><span class="line">sds <span class="title function_">sdsgrowzero</span><span class="params">(sds s, <span class="type">size_t</span> len)</span>;</span><br><span class="line">sds <span class="title function_">sdscatlen</span><span class="params">(sds s, <span class="type">const</span> <span class="type">void</span> *t, <span class="type">size_t</span> len)</span>;</span><br><span class="line">sds <span class="title function_">sdscat</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *t)</span>;</span><br><span class="line">sds <span class="title function_">sdscatsds</span><span class="params">(sds s, <span class="type">const</span> sds t)</span>;</span><br><span class="line">sds <span class="title function_">sdscpylen</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *t, <span class="type">size_t</span> len)</span>;</span><br><span class="line">sds <span class="title function_">sdscpy</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *t)</span>;</span><br><span class="line"></span><br><span class="line">sds <span class="title function_">sdscatvprintf</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__</span></span><br><span class="line">sds <span class="title function_">sdscatprintf</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span></span><br><span class="line">    __<span class="title function_">attribute__</span><span class="params">((format(<span class="built_in">printf</span>, <span class="number">2</span>, <span class="number">3</span>)))</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">sds <span class="title function_">sdscatprintf</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">sds <span class="title function_">sdscatfmt</span><span class="params">(sds s, <span class="type">char</span> <span class="type">const</span> *fmt, ...)</span>;</span><br><span class="line">sds <span class="title function_">sdstrim</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *cset)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdssubstr</span><span class="params">(sds s, <span class="type">size_t</span> start, <span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdsrange</span><span class="params">(sds s, <span class="type">ssize_t</span> start, <span class="type">ssize_t</span> end)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdsupdatelen</span><span class="params">(sds s)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdsclear</span><span class="params">(sds s)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sdscmp</span><span class="params">(<span class="type">const</span> sds s1, <span class="type">const</span> sds s2)</span>;</span><br><span class="line">sds *<span class="title function_">sdssplitlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">ssize_t</span> len, <span class="type">const</span> <span class="type">char</span> *sep, <span class="type">int</span> seplen, <span class="type">int</span> *count)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdsfreesplitres</span><span class="params">(sds *tokens, <span class="type">int</span> count)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdstolower</span><span class="params">(sds s)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdstoupper</span><span class="params">(sds s)</span>;</span><br><span class="line">sds <span class="title function_">sdsfromlonglong</span><span class="params">(<span class="type">long</span> <span class="type">long</span> value)</span>;</span><br><span class="line">sds <span class="title function_">sdscatrepr</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *p, <span class="type">size_t</span> len)</span>;</span><br><span class="line">sds *<span class="title function_">sdssplitargs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *line, <span class="type">int</span> *argc)</span>;</span><br><span class="line">sds <span class="title function_">sdsmapchars</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *from, <span class="type">const</span> <span class="type">char</span> *to, <span class="type">size_t</span> setlen)</span>;</span><br><span class="line">sds <span class="title function_">sdsjoin</span><span class="params">(<span class="type">char</span> **argv, <span class="type">int</span> argc, <span class="type">char</span> *sep)</span>;</span><br><span class="line">sds <span class="title function_">sdsjoinsds</span><span class="params">(sds *argv, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *sep, <span class="type">size_t</span> seplen)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sdsneedsrepr</span><span class="params">(<span class="type">const</span> sds s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Callback for sdstemplate. The function gets called by sdstemplate</span></span><br><span class="line"><span class="comment"> * every time a variable needs to be expanded. The variable name is</span></span><br><span class="line"><span class="comment"> * provided as variable, and the callback is expected to return a</span></span><br><span class="line"><span class="comment"> * substitution value. Returning a NULL indicates an error.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">sds</span> <span class="params">(*<span class="type">sdstemplate_callback_t</span>)</span><span class="params">(<span class="type">const</span> sds variable, <span class="type">void</span> *arg)</span>;</span><br><span class="line">sds <span class="title function_">sdstemplate</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *template, <span class="type">sdstemplate_callback_t</span> cb_func, <span class="type">void</span> *cb_arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Low level functions exposed to the user API */</span></span><br><span class="line">sds <span class="title function_">sdsMakeRoomFor</span><span class="params">(sds s, <span class="type">size_t</span> addlen)</span>;</span><br><span class="line">sds <span class="title function_">sdsMakeRoomForNonGreedy</span><span class="params">(sds s, <span class="type">size_t</span> addlen)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sdsIncrLen</span><span class="params">(sds s, <span class="type">ssize_t</span> incr)</span>;</span><br><span class="line">sds <span class="title function_">sdsRemoveFreeSpace</span><span class="params">(sds s, <span class="type">int</span> would_regrow)</span>;</span><br><span class="line">sds <span class="title function_">sdsResize</span><span class="params">(sds s, <span class="type">size_t</span> size, <span class="type">int</span> would_regrow)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">sdsAllocSize</span><span class="params">(sds s)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">sdsAllocPtr</span><span class="params">(sds s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Export the allocator used by SDS to the program using SDS.</span></span><br><span class="line"><span class="comment"> * Sometimes the program SDS is linked to, may use a different set of</span></span><br><span class="line"><span class="comment"> * allocators, but may want to allocate or free things that SDS will</span></span><br><span class="line"><span class="comment"> * respectively free or allocate. */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">sds_malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">sds_realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sds_free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> REDIS_TEST</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sdsTest</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倒排索引的Python实现</title>
      <link href="/2022/05/26/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/05/26/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>索引保存了每个词出现的文章编号以及出现的次数</p><p>未保存更详细的位置信息等</p><p>实现了通过倒排索引检索文档,不过效果上略差于BM25检索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">性能</span><br><span class="line">top1: 4180/5352    ---0.781</span><br><span class="line">top2:  383/5352    ---0.853</span><br><span class="line">top3:  131/5352    ---0.877</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">coding:UTF-8</span></span><br><span class="line"><span class="string">author:LemontreeN</span></span><br><span class="line"><span class="string">date:2022-05-08</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> ltp <span class="keyword">import</span> LTP</span><br><span class="line"></span><br><span class="line">ltp = LTP(path=<span class="string">&quot;base&quot;</span>)<span class="comment"># base模型</span></span><br><span class="line"><span class="comment"># ltp = LTP()# small小模型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreProcessed</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stop_words = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.cnt = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.index_path = <span class="string">&#x27;data/inverted_index.txt&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.word_dict = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.cnts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_stop_words</span>(<span class="params">self, file_path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="variable language_">self</span>.stop_words = <span class="built_in">set</span>(fp.read().split(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_index</span>(<span class="params">self, input_path: <span class="built_in">str</span></span>):</span><br><span class="line">        progress_read_index = tqdm.tqdm(<span class="built_in">range</span>(<span class="number">14768</span>), <span class="string">f&#x27;建立索引中,目前进度&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(input_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> js:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> js.readlines():</span><br><span class="line">                data = json.loads(line)</span><br><span class="line">                pid = data.get(<span class="string">&#x27;pid&#x27;</span>)</span><br><span class="line">                seg_list = data.get(<span class="string">&#x27;document&#x27;</span>)</span><br><span class="line">                seg = ltp.seg(seg_list)</span><br><span class="line">                data[<span class="string">&#x27;document&#x27;</span>] = [<span class="string">&#x27; &#x27;</span>.join(item) <span class="keyword">for</span> item <span class="keyword">in</span> seg[<span class="number">0</span>]]</span><br><span class="line">                word_cnt = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> seg[<span class="number">0</span>]:</span><br><span class="line">                    word_cnt += <span class="built_in">len</span>(item)</span><br><span class="line">                    <span class="keyword">for</span> word <span class="keyword">in</span> item:</span><br><span class="line">                        flag = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">if</span> word <span class="keyword">in</span> <span class="variable language_">self</span>.stop_words:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">elif</span> word <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.word_dict:</span><br><span class="line">                            <span class="variable language_">self</span>.word_dict[word] = []</span><br><span class="line">                            <span class="variable language_">self</span>.word_dict[word].append([pid, <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            index_list = <span class="variable language_">self</span>.word_dict[word]</span><br><span class="line">                            <span class="keyword">for</span> index <span class="keyword">in</span> index_list:</span><br><span class="line">                                <span class="keyword">if</span> index[<span class="number">0</span>] == pid:</span><br><span class="line">                                    index[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">                                    flag = <span class="number">1</span></span><br><span class="line">                            <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                                <span class="variable language_">self</span>.word_dict[word].append([pid, <span class="number">1</span>])</span><br><span class="line">                progress_read_index.update(<span class="number">1</span>)</span><br><span class="line">                <span class="variable language_">self</span>.cnts.append(word_cnt)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.index_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> index_output:</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="variable language_">self</span>.word_dict.items():</span><br><span class="line">                index_output.write(<span class="built_in">str</span>(key) + <span class="string">&#x27;;;;&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> value:</span><br><span class="line">                    index_output.write(<span class="built_in">str</span>(i) + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                index_output.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/words.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>.cnts:</span><br><span class="line">                fp.write(<span class="string">&#x27;%d\n&#x27;</span> % item)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_index</span>(<span class="params">self</span>):</span><br><span class="line">        progress_read_index = tqdm.tqdm(<span class="built_in">range</span>(<span class="number">355109</span>), <span class="string">f&#x27;读取索引中,目前进度&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/words.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="variable language_">self</span>.cnts = fp.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.index_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fp.readlines():</span><br><span class="line">                line = line.split(<span class="string">&#x27;;;;&#x27;</span>)<span class="comment"># 注意挑选合适的分隔符</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">2</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                word, index = line[<span class="number">0</span>], line[<span class="number">1</span>]</span><br><span class="line">                pid_list = index[:-<span class="number">2</span>].split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.word_dict[word] = pid_list</span><br><span class="line">                progress_read_index.update(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----***索引读取完毕***-----&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(&#x27;输入查询文本,输入 !quit 退出&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, conds: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        检索TOP3相关文档</span></span><br><span class="line"><span class="string">        :param conds: 查询条件</span></span><br><span class="line"><span class="string">        :return: 可能的文档列表: list</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        seg, hidden = ltp.seg([conds])</span><br><span class="line">        conds = <span class="string">&#x27;||&#x27;</span>.join(seg[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> conds != <span class="string">&#x27;!quit&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;&amp;&amp;&#x27;</span> <span class="keyword">in</span> conds:</span><br><span class="line">                conds = conds.split(<span class="string">&#x27;&amp;&amp;&#x27;</span>)</span><br><span class="line">                pid_list = <span class="variable language_">self</span>.word_dict.get(conds[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(conds)):</span><br><span class="line">                    merge_list = <span class="variable language_">self</span>.word_dict.get(conds[i])</span><br><span class="line">                    temp_list = []</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> merge_list:</span><br><span class="line">                        <span class="keyword">if</span> item <span class="keyword">in</span> pid_list:</span><br><span class="line">                            temp_list.append(item)</span><br><span class="line">                    pid_list = temp_list</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;||&#x27;</span> <span class="keyword">in</span> conds:</span><br><span class="line">                conds = conds.split(<span class="string">&#x27;||&#x27;</span>)</span><br><span class="line">                pid_list = []</span><br><span class="line">                weight = []</span><br><span class="line">                <span class="keyword">for</span> cond <span class="keyword">in</span> conds:</span><br><span class="line">                    merge_list = <span class="variable language_">self</span>.word_dict.get(cond)</span><br><span class="line">                    <span class="keyword">if</span> merge_list <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        df = <span class="built_in">len</span>(merge_list)</span><br><span class="line">                        idf = <span class="number">1</span> / df</span><br><span class="line">                        <span class="keyword">for</span> item <span class="keyword">in</span> merge_list:</span><br><span class="line">                            item = item.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                            pid = <span class="built_in">int</span>(item[<span class="number">0</span>][<span class="number">1</span>:])</span><br><span class="line">                            fre = <span class="built_in">int</span>(item[<span class="number">1</span>][:-<span class="number">1</span>])</span><br><span class="line">                            tf=math.log(fre+<span class="number">3</span>)</span><br><span class="line">                            tf_idf = tf * idf<span class="comment"># 参数自己设置</span></span><br><span class="line">                            <span class="keyword">if</span> pid <span class="keyword">not</span> <span class="keyword">in</span> pid_list:</span><br><span class="line">                                pid_list.append(pid)</span><br><span class="line">                                weight.append(tf_idf)</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pid_list)):</span><br><span class="line">                                    <span class="keyword">if</span> pid_list[i] == pid:</span><br><span class="line">                                        weight[i] += tf_idf</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pid_list = <span class="variable language_">self</span>.word_dict.get(conds)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pid_list:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;None!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> [-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pid_weight = <span class="built_in">sorted</span>([(w, p) <span class="keyword">for</span> w, p <span class="keyword">in</span> <span class="built_in">zip</span>(weight, pid_list)], reverse=<span class="literal">True</span>)</span><br><span class="line">                <span class="built_in">print</span>(pid_weight[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(pid_weight)==<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> [pid_weight[<span class="number">0</span>][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">len</span>(pid_weight)==<span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> [pid_weight[<span class="number">0</span>][<span class="number">1</span>], pid_weight[<span class="number">1</span>][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> [pid_weight[<span class="number">0</span>][<span class="number">1</span>],pid_weight[<span class="number">1</span>][<span class="number">1</span>],pid_weight[<span class="number">2</span>][<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pre = PreProcessed()</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&#x27;\n****Inverted Index IR System****\nChoice:\n1. 读取文件建立索引\n2. 使用已有索引查询&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        pre.read_stop_words(<span class="string">&#x27;data/stopwords.txt&#x27;</span>)</span><br><span class="line">        pre.generate_index(<span class="string">&#x27;data/passages_multi_sentences.json&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        pre.read_index()</span><br><span class="line">        pre.search(<span class="string">&#x27;家||中国&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
