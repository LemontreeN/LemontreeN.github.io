<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis数据结构_2_intset</title>
      <link href="/2024/09/19/Redis%E6%BA%90%E7%A0%81/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_2_Set/"/>
      <url>/2024/09/19/Redis%E6%BA%90%E7%A0%81/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_2_Set/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构_1_SDS</title>
      <link href="/2024/09/13/Redis%E6%BA%90%E7%A0%81/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_1_SDS/"/>
      <url>/2024/09/13/Redis%E6%BA%90%E7%A0%81/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_1_SDS/</url>
      
        <content type="html"><![CDATA[<h4 id="SDS-详解"><a href="#SDS-详解" class="headerlink" title="SDS 详解"></a>SDS 详解</h4><p>为什么Redis没有使用C语言中的字符串？</p><ul><li>获取字符串长度需要运算</li><li>非二进制安全：C语言字符串的结束标志是’\0’，如果字符串中间出现了’\0’，读取就会提前结束</li><li>不可修改：字面值存储在字符串常量池中，不可修改</li></ul><p>C语言的字符串底层都是字符数组char[]，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* s = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">// 底层是&#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;,&#x27;\0&#x27;&#125;,其中&#x27;\0&#x27;是结束标志</span></span><br></pre></td></tr></table></figure><p>因此，Redis实现了SDS（Simple Dynamic String）- 简单动态字符串。</p><h5 id="sds优点："><a href="#sds优点：" class="headerlink" title="sds优点："></a>sds优点：</h5><ul><li>获取字符串长度的的时间复杂度为O(1)</li><li>支持动态扩容</li><li>减少了内存分配次数</li><li>二进制安全</li></ul><h5 id="sds结构体："><a href="#sds结构体：" class="headerlink" title="sds结构体："></a>sds结构体：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span> &#123;</span><span class="comment">// sdshdrx:x字节头部的SDS结构体，各种结构体支持的长度和内存分配不同,以8为示例</span></span><br><span class="line">    <span class="type">uint8_t</span> len; <span class="comment">// buf[]数组已经保存的字符串字节数，不包含结束标志符（uint64_t: unsigned int 68bit;）</span></span><br><span class="line">    <span class="comment">// 所以sdshdr64支持的字符串最大长度为2^8-1-1个字节（因为buf中也有\0要多减1）</span></span><br><span class="line">    <span class="type">uint8_t</span> alloc; <span class="comment">// buf[]申请的总字节数，不包含结束标志符</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">// 不同SDS的头类型，用来控制SDS的头大小</span></span><br><span class="line">    <span class="type">char</span> buf[];<span class="comment">// 字符数组，保存了SDS的实际数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// flags实际取值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_5  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_8  1 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_16 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_32 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDS_TYPE_64 4</span></span><br></pre></td></tr></table></figure><p>以实际字符串”name”为例，它用sds8即可存储，结构如下：</p><p><img src="/../../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_1_SDS/image-20240913181310379.png" alt="image-20240913181310379"></p><ul><li>其中’\0’是为了兼容C语言字符串，也使得它可以使用C语言字符串的函数。</li></ul><h5 id="sds扩容"><a href="#sds扩容" class="headerlink" title="sds扩容"></a>sds扩容</h5><p>假设有一个初始sds，内容为”hi”，如下图</p><p><img src="/../../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_1_SDS/image-20240913181535065.png" alt="image-20240913181535065"></p><p>现在我们要给它追加”,Amy”，显然需要申请新的空间。检查新字符串大小：</p><ul><li>如果新字符串小于1M，新的空间为拓展后字符串的2倍+1，如图：<ul><li>具体地，”hi,Amy”长度为6，因此len为6，新空间为6*2+1&#x3D;13，但这个13包含了’\0’，而alloc不包含，所以alloc为12；长度还没达到flags&#x3D;1表示的最大值，因此flags仍为1.</li></ul></li></ul><p><img src="/../../images/Redis/image-20240919173241500.png" alt="image-20240919173241500"></p><ul><li>如果新字符串大于1M，新的空间为拓展后字符串+1M+1，这是内存预分配<ul><li>因为分配内存需要进行用户态到内核态的状态转变，因此预分配可以减少后续再次追加字符串导致的状态切换。</li></ul></li></ul><h5 id="sds-API"><a href="#sds-API" class="headerlink" title="sds API"></a>sds API</h5><p>&#x2F;&#x2F;TODO</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倒排索引的Python实现</title>
      <link href="/2022/05/26/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/05/26/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>索引保存了每个词出现的文章编号以及出现的次数</p><p>未保存更详细的位置信息等</p><p>实现了通过倒排索引检索文档,不过效果上略差于BM25检索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">性能</span><br><span class="line">top1: 4180/5352    ---0.781</span><br><span class="line">top2:  383/5352    ---0.853</span><br><span class="line">top3:  131/5352    ---0.877</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">coding:UTF-8</span></span><br><span class="line"><span class="string">author:LemontreeN</span></span><br><span class="line"><span class="string">date:2022-05-08</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> ltp <span class="keyword">import</span> LTP</span><br><span class="line"></span><br><span class="line">ltp = LTP(path=<span class="string">&quot;base&quot;</span>)<span class="comment"># base模型</span></span><br><span class="line"><span class="comment"># ltp = LTP()# small小模型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreProcessed</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stop_words = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.cnt = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.index_path = <span class="string">&#x27;data/inverted_index.txt&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.word_dict = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.cnts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_stop_words</span>(<span class="params">self, file_path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="variable language_">self</span>.stop_words = <span class="built_in">set</span>(fp.read().split(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_index</span>(<span class="params">self, input_path: <span class="built_in">str</span></span>):</span><br><span class="line">        progress_read_index = tqdm.tqdm(<span class="built_in">range</span>(<span class="number">14768</span>), <span class="string">f&#x27;建立索引中,目前进度&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(input_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> js:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> js.readlines():</span><br><span class="line">                data = json.loads(line)</span><br><span class="line">                pid = data.get(<span class="string">&#x27;pid&#x27;</span>)</span><br><span class="line">                seg_list = data.get(<span class="string">&#x27;document&#x27;</span>)</span><br><span class="line">                seg = ltp.seg(seg_list)</span><br><span class="line">                data[<span class="string">&#x27;document&#x27;</span>] = [<span class="string">&#x27; &#x27;</span>.join(item) <span class="keyword">for</span> item <span class="keyword">in</span> seg[<span class="number">0</span>]]</span><br><span class="line">                word_cnt = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> seg[<span class="number">0</span>]:</span><br><span class="line">                    word_cnt += <span class="built_in">len</span>(item)</span><br><span class="line">                    <span class="keyword">for</span> word <span class="keyword">in</span> item:</span><br><span class="line">                        flag = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">if</span> word <span class="keyword">in</span> <span class="variable language_">self</span>.stop_words:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">elif</span> word <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.word_dict:</span><br><span class="line">                            <span class="variable language_">self</span>.word_dict[word] = []</span><br><span class="line">                            <span class="variable language_">self</span>.word_dict[word].append([pid, <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            index_list = <span class="variable language_">self</span>.word_dict[word]</span><br><span class="line">                            <span class="keyword">for</span> index <span class="keyword">in</span> index_list:</span><br><span class="line">                                <span class="keyword">if</span> index[<span class="number">0</span>] == pid:</span><br><span class="line">                                    index[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">                                    flag = <span class="number">1</span></span><br><span class="line">                            <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                                <span class="variable language_">self</span>.word_dict[word].append([pid, <span class="number">1</span>])</span><br><span class="line">                progress_read_index.update(<span class="number">1</span>)</span><br><span class="line">                <span class="variable language_">self</span>.cnts.append(word_cnt)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.index_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> index_output:</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="variable language_">self</span>.word_dict.items():</span><br><span class="line">                index_output.write(<span class="built_in">str</span>(key) + <span class="string">&#x27;;;;&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> value:</span><br><span class="line">                    index_output.write(<span class="built_in">str</span>(i) + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                index_output.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/words.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>.cnts:</span><br><span class="line">                fp.write(<span class="string">&#x27;%d\n&#x27;</span> % item)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_index</span>(<span class="params">self</span>):</span><br><span class="line">        progress_read_index = tqdm.tqdm(<span class="built_in">range</span>(<span class="number">355109</span>), <span class="string">f&#x27;读取索引中,目前进度&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/words.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="variable language_">self</span>.cnts = fp.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.index_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fp.readlines():</span><br><span class="line">                line = line.split(<span class="string">&#x27;;;;&#x27;</span>)<span class="comment"># 注意挑选合适的分隔符</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">2</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                word, index = line[<span class="number">0</span>], line[<span class="number">1</span>]</span><br><span class="line">                pid_list = index[:-<span class="number">2</span>].split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.word_dict[word] = pid_list</span><br><span class="line">                progress_read_index.update(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----***索引读取完毕***-----&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(&#x27;输入查询文本,输入 !quit 退出&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, conds: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        检索TOP3相关文档</span></span><br><span class="line"><span class="string">        :param conds: 查询条件</span></span><br><span class="line"><span class="string">        :return: 可能的文档列表: list</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        seg, hidden = ltp.seg([conds])</span><br><span class="line">        conds = <span class="string">&#x27;||&#x27;</span>.join(seg[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> conds != <span class="string">&#x27;!quit&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;&amp;&amp;&#x27;</span> <span class="keyword">in</span> conds:</span><br><span class="line">                conds = conds.split(<span class="string">&#x27;&amp;&amp;&#x27;</span>)</span><br><span class="line">                pid_list = <span class="variable language_">self</span>.word_dict.get(conds[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(conds)):</span><br><span class="line">                    merge_list = <span class="variable language_">self</span>.word_dict.get(conds[i])</span><br><span class="line">                    temp_list = []</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> merge_list:</span><br><span class="line">                        <span class="keyword">if</span> item <span class="keyword">in</span> pid_list:</span><br><span class="line">                            temp_list.append(item)</span><br><span class="line">                    pid_list = temp_list</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;||&#x27;</span> <span class="keyword">in</span> conds:</span><br><span class="line">                conds = conds.split(<span class="string">&#x27;||&#x27;</span>)</span><br><span class="line">                pid_list = []</span><br><span class="line">                weight = []</span><br><span class="line">                <span class="keyword">for</span> cond <span class="keyword">in</span> conds:</span><br><span class="line">                    merge_list = <span class="variable language_">self</span>.word_dict.get(cond)</span><br><span class="line">                    <span class="keyword">if</span> merge_list <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        df = <span class="built_in">len</span>(merge_list)</span><br><span class="line">                        idf = <span class="number">1</span> / df</span><br><span class="line">                        <span class="keyword">for</span> item <span class="keyword">in</span> merge_list:</span><br><span class="line">                            item = item.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                            pid = <span class="built_in">int</span>(item[<span class="number">0</span>][<span class="number">1</span>:])</span><br><span class="line">                            fre = <span class="built_in">int</span>(item[<span class="number">1</span>][:-<span class="number">1</span>])</span><br><span class="line">                            tf=math.log(fre+<span class="number">3</span>)</span><br><span class="line">                            tf_idf = tf * idf<span class="comment"># 参数自己设置</span></span><br><span class="line">                            <span class="keyword">if</span> pid <span class="keyword">not</span> <span class="keyword">in</span> pid_list:</span><br><span class="line">                                pid_list.append(pid)</span><br><span class="line">                                weight.append(tf_idf)</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pid_list)):</span><br><span class="line">                                    <span class="keyword">if</span> pid_list[i] == pid:</span><br><span class="line">                                        weight[i] += tf_idf</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pid_list = <span class="variable language_">self</span>.word_dict.get(conds)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pid_list:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;None!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> [-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pid_weight = <span class="built_in">sorted</span>([(w, p) <span class="keyword">for</span> w, p <span class="keyword">in</span> <span class="built_in">zip</span>(weight, pid_list)], reverse=<span class="literal">True</span>)</span><br><span class="line">                <span class="built_in">print</span>(pid_weight[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(pid_weight)==<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> [pid_weight[<span class="number">0</span>][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">len</span>(pid_weight)==<span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> [pid_weight[<span class="number">0</span>][<span class="number">1</span>], pid_weight[<span class="number">1</span>][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> [pid_weight[<span class="number">0</span>][<span class="number">1</span>],pid_weight[<span class="number">1</span>][<span class="number">1</span>],pid_weight[<span class="number">2</span>][<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pre = PreProcessed()</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&#x27;\n****Inverted Index IR System****\nChoice:\n1. 读取文件建立索引\n2. 使用已有索引查询&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        pre.read_stop_words(<span class="string">&#x27;data/stopwords.txt&#x27;</span>)</span><br><span class="line">        pre.generate_index(<span class="string">&#x27;data/passages_multi_sentences.json&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        pre.read_index()</span><br><span class="line">        pre.search(<span class="string">&#x27;家||中国&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
